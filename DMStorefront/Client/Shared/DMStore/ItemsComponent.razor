@page "/item"
@attribute [Authorize]
@using DMStorefront.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject IJSRuntime js
@inject AuthenticationStateProvider asp
@inject StoreStateService _storeStateService


<div class="page-title">
	<h1>All Items <a class="btn btn-success" href="/item/create"> Create a New Item </a></h1>
</div>

<div>
	<br>
	@if (Items == null)
	{
		<text>Loading...</text>
	}
	else if (Items.Length == 0)
	{
		<text>No Records Found.</text>
	}
	else
	{
		<table class="table table-dark">
			<thead>
				<tr>

					<th>Name</th>
					<th>Weight</th>
					<th>Price</th>
					<th>Description</th>
					<th></th>
				</tr>
			</thead>
			<tbody>

				@foreach (Item item in Items)
				{
					<tr>
						<td>@item.Name</td>
						<td>@item.Weight</td>
						<td>@item.Price</td>
						<td>@item.Description</td>
						<td>
							<a class="btn btn-success" href="item/edit/@item.Name">Edit</a>
							<button class="btn btn-danger" @onclick="@(() => Delete(item.Name))">Delete</button>
							<!--- //make if statement to check it item is in Stock. if no, "Add to store" if yes, "remove from store"-->
							@if (stockItems.Contains(item))
							{

								<button type="button" class="btn btn-outline-info" @onclick="@(() => RemoveFromStore(item.Name, @GetAsp.User.Identity.Name))">Remove From Store</button>
							}
							else
							{
								<button type="button" class="btn btn-info" @onclick="@(() => AddToStore(item.Name, @GetAsp.User.Identity.Name))">Add to Store</button>

							}
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
</div>


@code {
	Item[] Items { get; set; } = new Item[0];
	Stock[] stocks { get; set; } = new Stock[0];
	AuthenticationState? GetAsp { get; set; }
	Item[] stockItems { get; set; }
	String userName { get; set; }


	protected override async Task OnInitializedAsync()
	{
		var newItems = await Http.GetFromJsonAsync<Item[]>("api/item");
		GetAsp = await asp.GetAuthenticationStateAsync();
		userName = GetAsp.User.Identity.Name;
		stockItems = await Http.GetFromJsonAsync<Item[]>($"api/stock/{userName}");
		GetAsp = await asp.GetAuthenticationStateAsync();
		if (newItems != null)
		{
			Items = newItems;
		}

	}
	async Task Delete(string itemName)
	{
		var item = Items.First(x => x.Name == itemName);
		if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {item.Name}'s ({item.Name}) Record?"))
		{
			await Http.DeleteAsync($"api/item/{itemName}");
			await OnInitializedAsync();
			_storeStateService.UpdateStore();
		}
	}

	async Task AddToStore(string itemName, string userName)
	{
		var item = Items.FirstOrDefault(x => x.Name == itemName);
		//var stock = stocks.FirstOrDefault(a => a.UserName == userName);

		await Http.PostAsync($"api/stock/{userName}/additem/{itemName}", null);
		await OnInitializedAsync();
		_storeStateService.UpdateStore();
	}

	async Task RemoveFromStore(string itemName, string userName)
	{
		var item = stockItems.FirstOrDefault(x => x.Name == itemName);
		//var userStock = stocks.FirstOrDefault(a => a.UserName == userName);
		userName = GetAsp.User.Identity.Name;

		await Http.PostAsync($"api/stock/{userName}/removeitem/{itemName}", null);
		await OnInitializedAsync();
		_storeStateService.UpdateStore();
	}

}
