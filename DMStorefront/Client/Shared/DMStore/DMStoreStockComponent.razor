@using DMStorefront.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DMStorefront.Shared
@using System.Net.Http.Json

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime js
@inject AuthenticationStateProvider asp
@inject StoreStateService _storeStateService
@implements IDisposable
<!--WHAT THIS COMPONENT DOES: hold store stock table-->
<div>
	<h3>@getasp.User.Identity.Name's Store Inventory</h3>

	<br>

	@if (stockItems == null)
	{
		<text>Loading...</text>
	}
	else if (stockItems.Length == 0)
	{
		<text>No Records Found.</text>
	}
	else
	{
		<table class="table table-dark">
			<thead>
				<tr>

					<th>Name</th>
					<th>Weight</th>
					<th>Price</th>
					<th>Description</th>
					<th></th>
				</tr>
			</thead>
			<tbody>

				@foreach (Item item in stockItems)
				{
					<tr>
						<td>@item.Name</td>
						<td>@item.Weight</td>
						<td>@item.Price</td>
						<td>@item.Description</td>
						<td>
							<button class="btn btn-danger" @onclick="@(() => RemoveFromStore(item.Name, @getasp.User.Identity.Name))">Remove</button>

						</td>
					</tr>
				}
			</tbody>
		</table>
	}
</div>
@code {
	Item[] items { get; set; }
	Stock stock { get; set; }
	AuthenticationState? getasp { get; set; }
	Item[] stockItems { get; set; }
	Stock[] stocks { get; set; }
	String userName { get; set; }

	protected override void OnInitialized()
	{
		_storeStateService.OnChange += UpdateStock;
	}

	protected override async Task OnInitializedAsync()
	{
		getasp = await asp.GetAuthenticationStateAsync();
		userName = getasp.User.Identity.Name;
		stockItems = await Http.GetFromJsonAsync<Item[]>($"api/stock/{userName}");
	}

	public void UpdateStock()
	{
		InvokeAsync(async () =>
		{
			getasp = await asp.GetAuthenticationStateAsync();
			userName = getasp.User.Identity.Name;
			stockItems = await Http.GetFromJsonAsync<Item[]>($"api/stock/{userName}");
			StateHasChanged();
		});
	}

	async Task RemoveFromStore(string itemName, string userName)
	{
		var item = stockItems.FirstOrDefault(x => x.Name == itemName);
		//var userStock = stocks.FirstOrDefault(a => a.UserName == userName);
		userName = getasp.User.Identity.Name;

		await Http.PostAsync($"api/stock/{userName}/removeitem/{itemName}", null);
		await OnInitializedAsync();
	}

	public void Dispose()
	{
		_storeStateService.OnChange -= UpdateStock;
	}

}
