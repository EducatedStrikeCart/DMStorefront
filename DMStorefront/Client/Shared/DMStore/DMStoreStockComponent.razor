@attribute [Authorize]
@using DMStorefront.Shared.Models
@inject HttpClient http
@inject AuthenticationStateProvider asp
@inject StoreStateService storeStateService
@implements IDisposable


<div class="page-title">
	<h1>@GetAsp.User.Identity.Name's Store Inventory</h1>
</div>

<br>

<div>
	@if (StockItems == null)
	{
		<text>Loading...</text>
	}
	else if (StockItems.Length == 0)
	{
		<text>No Records Found.</text>
	}
	else
	{
		<table class="table table-striped table-dark">
			<thead>
				<tr>

					<th>Name</th>
					<th>Weight</th>
					<th>Price</th>
					<th>Description</th>
					<th></th>
				</tr>
			</thead>
			<tbody>

				@foreach (Item item in StockItems)
				{
					<tr>
						<td>@item.Name</td>
						<td>@item.Weight</td>
						<td>@item.Price</td>
						<td>@item.Description</td>
						<td>
							<button class="btn btn-danger" @onclick="@(() => RemoveFromStore(item.Name, @GetAsp.User.Identity.Name))">Remove</button>

						</td>
					</tr>
				}
			</tbody>
		</table>
	}
</div>


@code {
	AuthenticationState? GetAsp { get; set; }
	Item[] StockItems { get; set; }
	String Username { get; set; }

	protected override void OnInitialized()
	{
		storeStateService.OnChange += UpdateStock;
	}

	protected override async Task OnInitializedAsync()
	{
		GetAsp = await asp.GetAuthenticationStateAsync();
		Username = GetAsp.User.Identity.Name;
		StockItems = await http.GetFromJsonAsync<Item[]>($"api/stock/{Username}");
	}

	public void UpdateStock()
	{
		InvokeAsync(async () =>
		{
			GetAsp = await asp.GetAuthenticationStateAsync();
			Username = GetAsp.User.Identity.Name;
			StockItems = await http.GetFromJsonAsync<Item[]>($"api/stock/{Username}");
			StateHasChanged();
		});
	}

	async Task RemoveFromStore(string itemName, string userName)
	{
		var item = StockItems.FirstOrDefault(x => x.Name == itemName);
		userName = GetAsp.User.Identity.Name;

		await http.PostAsync($"api/stock/{userName}/removeitem/{itemName}", null);
		await OnInitializedAsync();
	}

	public void Dispose()
	{
		storeStateService.OnChange -= UpdateStock;
	}
}
