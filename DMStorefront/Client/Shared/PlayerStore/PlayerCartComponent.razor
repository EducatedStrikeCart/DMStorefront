@using DMStorefront.Client.Services.ServiceModels
@inject CartService _cartApi;
@inject HttpClient _http;
@inject AuthenticationStateProvider _asp;
@implements IDisposable

<div class="container-fluid">
	<!-- TODO: Implement better way of setting gold-->
	
	<h3 class = "page-title">Cart</h3>
	<div class="d-flex justify-content-end" style= "font-family: 'Zen Loop'">
		Gold: @PlayerInventory.Wallet
	</div>
	<table class="table table-striped table-dark">
		<thead>
			<tr>
				<th>Name</th>
				<th>Price</th>
				<th>Quantity</th>
				<th>Subtotal</th>
			</tr>
		</thead>
		<tbody>
			@if (ItemsBought.Count == 0)
			{
				<tr>
					Cart Empty
				</tr>
			}
			else
			{
				@foreach (CartEntry entry in ItemsBought)
				{
					<tr>
						<td>
							@entry.Item.Name
						</td>
						<td>
							@entry.Item.Price Gold
						</td>
						<td>
							<div class="d-flex flex-row">
								<div>
									<button @onclick="() => IncreaseQuantity(entry.Item)">+</button>
									@entry.Quantity
									<button @onclick="() => DecreaseQuantity(entry.Item)">-</button>
								</div>
							</div>


						</td>

						<td>
							@entry.PriceSubTotal Gold
						</td>
					</tr>
					
				}
				<tr>
						<td>Total: @total Gold</td>
					</tr>
			}
		</tbody>
	</table>
</div>

@code {
	List<CartEntry> ItemsBought = new();
	AuthenticationState? getasp { get; set; }
	Inventory PlayerInventory { get; set; } = new Inventory(0, "none");
	int total { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		await UpdateWallet();
	}

	protected override void OnInitialized()
	{

		_cartApi.OnChange += UpdateCart;
		UpdateCart();
	}

	public void UpdateCart()
	{
		InvokeAsync(async () => 
		{
			ItemsBought = await _cartApi.GetCart();
			total = ItemsBought.Sum(entry => entry.PriceSubTotal);
			StateHasChanged(); 
		});

	}

	public async Task IncreaseQuantity(Item item)
	{
		await _cartApi.Add(item);
	}

	public async Task DecreaseQuantity(Item item)
	{
		await _cartApi.Remove(item);
	}

	public async Task UpdateWallet()
	{
		var getAsp = await _asp.GetAuthenticationStateAsync();
		var userName = getAsp.User.Identity.Name;
		var inventoryResult = await _http.GetFromJsonAsync<Inventory>($"api/inventory/{userName}");
		if (inventoryResult != null)
		{
			PlayerInventory = inventoryResult;
		}
	}

	public void Dispose()
	{
		_cartApi.OnChange -= StateHasChanged;
	}
}
