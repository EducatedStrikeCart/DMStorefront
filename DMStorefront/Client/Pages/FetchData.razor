@page "/item"
@using DMStorefront.Shared.Models.Item
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DMStorefront.Shared

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime js


<h3>Items</h3>
<small>Add items.</small>
<div class="form-group">
    <a class="btn btn-success" href="/item/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (items == null)
{
    <text>Loading...</text>
}
else if (items.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                
                <th>Name</th>
                <th>Weight</th>
                <th>Price</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Item item in items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Weight</td>
                    <td>@item.Price</td>
                    <td>@item.Description</td>
                    <td>
                        <a class="btn btn-success" href="item/edit/@item.Name">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(item.Name))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    Item[] items { get; set; } = new Item[0];
    protected override async Task OnInitializedAsync()
    {
        var newItems = await Http.GetFromJsonAsync<Item[]>("api/item");
        if (newItems != null)
        {
            items = newItems;
        }

    }
    async Task Delete(string itemName)
    {
        var item = items.First(x => x.Name == itemName);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {item.Name}'s ({item.Name}) Record?"))
        {
            await Http.DeleteAsync($"api/item/{itemName}");
            await OnInitializedAsync();
        }
    }
}
